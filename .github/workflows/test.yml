name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:6.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/tests/test-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/test-requirements.txt

    - name: Set environment variables
      run: |
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "ENV=TEST" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "APP_SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "CAPTCHA_KEY_ID=test-key" >> $GITHUB_ENV
        echo "CAPTCHA_SECRET_KEY=test-secret" >> $GITHUB_ENV

    - name: Run linting
      run: |
        pip install flake8
        flake8 app.py tasks.py utilites.py celery_init.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app.py tasks.py utilites.py celery_init.py --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics

    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=app --cov=tasks --cov=utilites --cov=celery_init --cov-report=xml

    - name: Run functional tests  
      run: |
        pytest tests/functional/ -v --cov=app --cov=tasks --cov=utilites --cov=celery_init --cov-append --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Generate coverage report
      run: |
        pytest tests/ --cov=app --cov=tasks --cov=utilites --cov=celery_init --cov-report=html

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
